#But we only want each origin-destination pair distance
#http://rpackages.ianhowson.com/rforge/sp/man/spDistsN1.html
routes$spDist[i] <- spDistsN1(orig,dests[i,], longlat=TRUE)
}
plot(routes$distance, routes$spDist)
routes$rf <- spDist/distance
routes$rf <- routes$spDist/routes$distance
hist(routes$rf, breaks=30)
library(ggplot2)
summary(routes$rf)
install.packages(Hmisc)
install.packages("Hmisc")
routes$distbins <- as.numeric(cut2(routes$spDist, g=10))
library(Hmisc)#for binning distances
routes$distbins <- as.numeric(cut2(routes$spDist, g=10))
View(routes)
routes$distbinmeans <- tapply(routes$spDist, routes$distbins, mean)
rfhypo <- data.frame(c(1:10), c(1:10))
View(rfhypo)
distmean <- rep(0,10)
rfmean <- rep(0,10)
distmean <- rep(0,10)
rfmean <- rep(0,10)
rfhypo <- data.frame(distmean, rfmean)
View(rfhypo)
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
bins = 10
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
line(rfhypo, col="green")
lines(rfhypo, col="green")
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 20
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
routes$distbins
head(routes$distbins)
routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
hist(routes$rf, breaks=10)
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 20
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
routes$rf <- routes$spDist/routes$distance
#Or have the ratio mean "how much further route distance is than Euclidean/Great Circle
#routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
library(sp)
library(ggplot2)
library(Hmisc)#for binning distances
routes$rf <- routes$spDist/routes$distance
#Or have the ratio mean "how much further route distance is than Euclidean/Great Circle
#routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
plot(rfhypo)
lines(rfhypo, col="green", xlab="distance", ylab="mean route factor")
plot(rfhypo, xlab="distance", ylab="mean route factor")
lines(rfhypo, col="green")
myjekyllsite = c("http://danolner.github.io/")
KnitPost <- function(input, base.url = myjekyllsite) {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
install.packages("rmarkdown"")
install.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
head(routes)
colnames(routes)
testy
routes <- read.csv("latestrbindOfMatrixOutputs.csv")
head(routes)
?rep
colnames(routes)
#compare straight-line (or Great Circle) distance to route distance
library(sp)
library(ggplot2)
library(Hmisc)#for binning distances
routes <- read.csv("latestrbindOfMatrixOutputs.csv")
#convert distance to kms
routes$distance <- routes$distance / 1000
#For ease of reading, let's subset to get the values we want
# origins <- subset(routes, select = c(origin_x, origin_y))
# dests <- subset(routes, select = c(dest_x, dest_y))
# justcoords <- subset(routes, select = c(origin_x, origin_y, dest_x, dest_y))
# justcoords <- data.matrix(justcoords)
origins <- data.matrix(subset(routes, select = c(origin_x, origin_y)))
dests <- data.matrix(subset(routes, select = c(dest_x, dest_y)))
routes$spDist <- 0
for (i in 1:nrow(origins)) {
#get a single pair, turn into matrix for spDistN1
#needs transposing. Not sure why it doesn't keep the original orientation
orig <- t(data.matrix(origins[i,]))
#spDistN1: first arg needs to be a matrix of points. Supplying it with a single-row matrix
#Second argument has to be a single point.
#If the first arg had more values it would find all dists between each of those and the single point
#But we only want each origin-destination pair distance
#http://rpackages.ianhowson.com/rforge/sp/man/spDistsN1.html
routes$spDist[i] <- spDistsN1(orig,dests[i,], longlat=TRUE)
}
plot(routes$distance, routes$spDist)
#ROUTE FACTOR
#I think I might reverse the ratio from the one I say in the PhD.
#Euclidean over route will be < 1, with it going towards asymptotic (lim -> 1) as routes become perfect.
#routes$rf <- routes$spDist/routes$distance
#Or have the ratio mean "how much further route distance is than Euclidean/Great Circle
routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo, xlab="distance", ylab="mean route factor")
lines(rfhypo, col="green")
colnames(routes)
summary(routes$distbins)
tapply(routes$distbins, count)
table(routes$distbins)
myjekyllsite = c("http://danolner.github.io/")
KnitPost <- function(input, base.url = myjekyllsite) {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
KnitPost("routeFactor.Rmd")
nrow(routes)
myjekyllsite = c("http://danolner.github.io/")
KnitPost <- function(input, base.url = myjekyllsite) {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
KnitPost("routeFactor.Rmd")
plot(routes$distance, routes$rf)
routes[routes$rf>6,]
routes[routes$rf>6,5:6]
#compare straight-line (or Great Circle) distance to route distance
library(sp)
library(ggplot2)
library(Hmisc)#for binning distances
routes <- read.csv("latestrbindOfMatrixOutputs.csv")
#convert distance to kms
routes$distance <- routes$distance / 1000
#For ease of reading, let's subset to get the values we want
# origins <- subset(routes, select = c(origin_x, origin_y))
# dests <- subset(routes, select = c(dest_x, dest_y))
# justcoords <- subset(routes, select = c(origin_x, origin_y, dest_x, dest_y))
# justcoords <- data.matrix(justcoords)
origins <- data.matrix(subset(routes, select = c(origin_x, origin_y)))
dests <- data.matrix(subset(routes, select = c(dest_x, dest_y)))
routes$spDist <- 0
for (i in 1:nrow(origins)) {
#get a single pair, turn into matrix for spDistN1
#needs transposing. Not sure why it doesn't keep the original orientation
orig <- t(data.matrix(origins[i,]))
#spDistN1: first arg needs to be a matrix of points. Supplying it with a single-row matrix
#Second argument has to be a single point.
#If the first arg had more values it would find all dists between each of those and the single point
#But we only want each origin-destination pair distance
#http://rpackages.ianhowson.com/rforge/sp/man/spDistsN1.html
routes$spDist[i] <- spDistsN1(orig,dests[i,], longlat=TRUE)
}
plot(routes$distance, routes$spDist)
#ROUTE FACTOR
#I think I might reverse the ratio from the one I say in the PhD.
#Euclidean over route will be < 1, with it going towards asymptotic (lim -> 1) as routes become perfect.
#routes$rf <- routes$spDist/routes$distance
#Or have the ratio mean "how much further route distance is than Euclidean/Great Circle
routes$rf <- routes$distance/routes$spDist
plot(routes$distance, routes$rf)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo, xlab="distance", ylab="mean route factor")
lines(rfhypo, col="green")
output <- ggplot(routes, aes(x = spDist, y = rf)) +
geom_histogram()
output
output <- ggplot(routes, aes(x = spDist, y = rf)) +
geom_histogram(stat="identity")
output
output <- ggplot(routes, aes(x = spDist, y = rf)) +
geom_histogram()
output
output <- ggplot(routes, aes(x = spDist)) +
geom_histogram(data=routes$rf)
output
output <- ggplot(routes, aes(y = rf)) +
geom_histogram()
output
output <- ggplot(routes, aes(y = rf)) +
geom_histogram(x = spDist)
output
output <- ggplot(routes, aes(y = rf)) +
geom_histogram(x = routes$spDist)
output
output <- ggplot(routes, aes(x = spDist,y = rf)) +
geom_histogram()
output
colnames(routes)
sub <- routes[,c(11,12)]
head(sub)
output <- ggplot(sub, aes(x = spDist)) +
geom_histogram()
output
output <- ggplot(routes, aes(x = spDist,y = rf)) +
geom_histogram(stat="identity")
# output <- ggplot(sub, aes(x = spDist)) +
#   geom_histogram()
output
is.factor(routes$distbins)
output <- ggplot(routes, aes(factor(distbins), rf)) +
geom_boxplot()
output
routes[routes$rf>5,5:6]
output <- ggplot(routes[routes$distbins==10], aes(rf)) +
geom_boxplot()
output
output <- ggplot(routes[routes$distbins==10,], aes(rf)) +
geom_boxplot()
output
output <- ggplot(routes, aes(routes[routes$distbins==10,],rf)) +
geom_boxplot()
output
output <- ggplot(routes, aes(routes$distbins[routes$distbins==10],rf)) +
geom_boxplot()
output
output <- ggplot(routes, aes(distbins[routes$distbins==10],rf[routes$distbins==10])) +
geom_boxplot()
output
sub <- routes[routes$distbins == 10,]
output <- ggplot(sub, aes(factor(distbins), rf)) +
geom_boxplot()
output
myjekyllsite = c("http://danolner.github.io/")
KnitPost <- function(input, base.url = myjekyllsite) {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
KnitPost("routeFactor.Rmd")
myjekyllsite = c("http://danolner.github.io/")
KnitPost <- function(input, base.url = myjekyllsite) {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
KnitPost("routeFactor.Rmd")

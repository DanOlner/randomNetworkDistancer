nrow(routes)
setwd("C:/Users/geodo/Dropbox/R/Workspace/randomNetworkDistancer")
library(ggplot2)
library(reshape)
library(scales)
#Get last two...
#routes <- rbind(read.csv("latestrbindOfMatrixOutputs.csv"), read.csv("GoogleDistanceMatrixRandomPathRresults_Wed_May_21_18_06_23_2014.csv"))
#write.csv(routes, "latestrbindOfMatrixOutputs.csv")
routes <- read.csv("latestrbindOfMatrixOutputs.csv")
#Lets just check the basics
output <- ggplot(routes, aes(x = factor(1), y = (distance/1000))) +
geom_boxplot(outlier.size = 3) +
ggtitle(" ") +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
xlab(" ") +
ylab("Distance")
output
histyprinty <- ggplot(routes, aes(x=distance/1000)) +
#   scale_x_continuous(trans=log2_trans()) +
#   coord_cartesian(xlim = c(0, 10)) +
ggtitle(" ") +
theme(plot.title = element_text(lineheight=1.5, face="bold")) +
#   theme_classic() +
xlab("distance (km)") +
#   ylab("number of individual flows") +
#   geom_histogram(colour="white", fill="black")
geom_histogram(colour="white", fill="black", binwidth = 25) +
geom_vline(xintercept=mean(routes$distance/1000), color="red")
#   geom_histogram(colour="white", fill="black", binwidth = 0.75)
#           geom_histogram(aes(fill = value))
histyprinty
histyprinty <- ggplot(routes, aes(x=distance/1000)) +
#   scale_x_continuous(trans=log2_trans()) +
#   coord_cartesian(xlim = c(0, 10)) +
ggtitle(" ") +
theme(plot.title = element_text(lineheight=1.5, face="bold")) +
#   theme_classic() +
xlab("distance (km)") +
#   ylab("number of individual flows") +
#   geom_histogram(colour="white", fill="black")
geom_histogram(colour="white", fill="black", binwidth = 25) +
geom_vline(xintercept=mean(routes$distance/1000), color="red")
#   geom_histogram(colour="white", fill="black", binwidth = 0.75)
#           geom_histogram(aes(fill = value))
histyprinty
ggsave(histyprinty, file="randomisedDistanceRoutesUK.png", width=8, height=5, dpi = 600)
library(ggplot2)
library(reshape)
library(scales)
histyprinty <- ggplot(routes, aes(x=distance/1000)) +
#   scale_x_continuous(trans=log2_trans()) +
#   coord_cartesian(xlim = c(0, 10)) +
ggtitle(" ") +
theme(plot.title = element_text(lineheight=1.5, face="bold")) +
#   theme_classic() +
xlab("distance (km)") +
#   ylab("number of individual flows") +
#   geom_histogram(colour="white", fill="black")
geom_histogram(colour="white", fill="black", binwidth = 25) +
geom_vline(xintercept=mean(routes$distance/1000), color="red")
#   geom_histogram(colour="white", fill="black", binwidth = 0.75)
#           geom_histogram(aes(fill = value))
histyprinty
ggsave(histyprinty, file="randomisedDistanceRoutesUK.png", width=8, height=5, dpi = 600)
ggsave(histyprinty, file="randomisedDistanceRoutesUK.png", width=6, height=4, dpi = 600)
setwd("C:/Users/geodo/Dropbox/R/Workspace/randomNetworkDistancer")
library(ggplot2)
library(reshape)
library(scales)
#Get last two...
#routes <- rbind(read.csv("latestrbindOfMatrixOutputs.csv"), read.csv("GoogleDistanceMatrixRandomPathRresults_Wed_May_21_18_06_23_2014.csv"))
#write.csv(routes, "latestrbindOfMatrixOutputs.csv")
routes <- read.csv("latestrbindOfMatrixOutputs.csv")
#Lets just check the basics
output <- ggplot(routes, aes(x = factor(1), y = (distance/1000))) +
geom_boxplot(outlier.size = 3) +
ggtitle(" ") +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
xlab(" ") +
ylab("Distance")
output
setwd("C:/Users/geodo/Dropbox/R/Workspace/randomNetworkDistancer")
library(ggplot2)
library(reshape)
library(scales)
#Get last two...
#routes <- rbind(read.csv("latestrbindOfMatrixOutputs.csv"), read.csv("GoogleDistanceMatrixRandomPathRresults_Wed_May_21_18_06_23_2014.csv"))
#write.csv(routes, "latestrbindOfMatrixOutputs.csv")
routes <- read.csv("latestrbindOfMatrixOutputs.csv")
#Lets just check the basics
output <- ggplot(routes, aes(x = factor(1), y = (distance/1000))) +
geom_boxplot(outlier.size = 3) +
ggtitle(" ") +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
xlab(" ") +
ylab("Distance")
output
.libPaths()
install.packages("Rccp")
install.packages("Rcpp")
setwd("C:/Users/geodo/Dropbox/R/Workspace/randomNetworkDistancer")
library(ggplot2)
library(reshape)
library(scales)
#Get last two...
#routes <- rbind(read.csv("latestrbindOfMatrixOutputs.csv"), read.csv("GoogleDistanceMatrixRandomPathRresults_Wed_May_21_18_06_23_2014.csv"))
#write.csv(routes, "latestrbindOfMatrixOutputs.csv")
routes <- read.csv("latestrbindOfMatrixOutputs.csv")
#Lets just check the basics
output <- ggplot(routes, aes(x = factor(1), y = (distance/1000))) +
geom_boxplot(outlier.size = 3) +
ggtitle(" ") +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
xlab(" ") +
ylab("Distance")
output
routes <- read.csv("latestrbindOfMatrixOutputs.csv")
View(routes)
library(sp)
install.packages("sp")
library(sp)
origins <- subset(routes, select = (origin_x, origin_y))
origins <- subset(routes, select = c(origin_x, origin_y))
View(origins)
dests <- subset(routes, select = c(dest_x, dest_y))
ll <- matrix(c(5, 6, 60, 60), ncol=2)
ll
km <- spDistsN1(routes[,7:8], routes[9,10], longlat=TRUE)
justcoords <- subset(routes, select = c(origin_x, origin_y, dest_x, dest_y))
heda(justcoords)
head(justcoords)
class(justcoords)
justcoords <- subset(routes, select = c(origin_x, origin_y, dest_x, dest_y))
justcoords <- data.matrix(justcoords)
head(justcoords)
class(justcoords)
km <- spDistsN1(justcoords[,1:2], justcoords[,3:4], longlat=TRUE)
origins <- data.matrix(subset(routes, select = c(origin_x, origin_y)))
dests <- data.matrix(subset(routes, select = c(dest_x, dest_y)))
km <- spDistsN1(origins, dests, longlat=TRUE)
km <- spDistsN1(origins[1,], dests[1,], longlat=TRUE)
km <- spDistsN1(origins, dests[1,], longlat=TRUE)
p1 = SpatialPoints(cbind(1:3, 1:3))
p1
spDists(p1)
spDists(p1, p1)
spDists(p1, p1, diagonal = TRUE)
try(spDists(p1, p1, segments = TRUE))
spDists(p1, segments = TRUE)
spDistsN1(p1)
spDistsN1(p1, p1)
spDistsN1(p1, p1[1,])
orig <- origins[,1]
class(orig)
orig
orig <- origins[1,]
orig
class(orig)
class(origins)
orig <- data.matrix(origins[1,])
class(orig)
routes$npDist <- 0
for (i in 1:length(origins)) {
#get a single pair, turn into matrix for spDistN1
orig <- data.matrix(origins[i,])
routes$npDist[i] <- npDistsN1(orig,dests[i,], longlat=TRUE)
}
for (i in 1:length(origins)) {
#get a single pair, turn into matrix for spDistN1
orig <- data.matrix(origins[i,])
routes$npDist[i] <- spDistsN1(orig,dests[i,], longlat=TRUE)
}
km <- spDistsN1(origins, dests[1,], longlat=TRUE)
km
routes$spDist <- 0
routes$spDist[1] <- spDistsN1(orig,dests[1,], longlat=TRUE)
orig
orig <- t(data.matrix(origins[1,]))
orig
routes$spDist[1] <- spDistsN1(orig,dests[1,], longlat=TRUE)
routes$spDist
routes$spDist[1]
for (i in 1:length(origins)) {
#get a single pair, turn into matrix for spDistN1
#needs transposing. Not sure why it doesn't keep the original orientation
orig <- t(data.matrix(origins[i,]))
routes$spDist[i] <- spDistsN1(orig,dests[i,], longlat=TRUE)
}
i
length(origins)
nrow(origins)
for (i in 1:nrow(origins)) {
#get a single pair, turn into matrix for spDistN1
#needs transposing. Not sure why it doesn't keep the original orientation
orig <- t(data.matrix(origins[i,]))
routes$spDist[i] <- spDistsN1(orig,dests[i,], longlat=TRUE)
}
View(routes)
plot(routes$distance, routes$spDist)
routes <- read.csv("latestrbindOfMatrixOutputs.csv")
#convert distance to kms
routes$distance <- routes$distance / 1000
#For ease of reading, let's subset to get the values we want
# origins <- subset(routes, select = c(origin_x, origin_y))
# dests <- subset(routes, select = c(dest_x, dest_y))
# justcoords <- subset(routes, select = c(origin_x, origin_y, dest_x, dest_y))
# justcoords <- data.matrix(justcoords)
origins <- data.matrix(subset(routes, select = c(origin_x, origin_y)))
dests <- data.matrix(subset(routes, select = c(dest_x, dest_y)))
routes$spDist <- 0
for (i in 1:nrow(origins)) {
#get a single pair, turn into matrix for spDistN1
#needs transposing. Not sure why it doesn't keep the original orientation
orig <- t(data.matrix(origins[i,]))
#spDistN1: first arg needs to be a matrix of points. Supplying it with a single-row matrix
#Second argument has to be a single point.
#If the first arg had more values it would find all dists between each of those and the single point
#But we only want each origin-destination pair distance
#http://rpackages.ianhowson.com/rforge/sp/man/spDistsN1.html
routes$spDist[i] <- spDistsN1(orig,dests[i,], longlat=TRUE)
}
plot(routes$distance, routes$spDist)
routes$rf <- spDist/distance
routes$rf <- routes$spDist/routes$distance
hist(routes$rf, breaks=30)
library(ggplot2)
summary(routes$rf)
install.packages(Hmisc)
install.packages("Hmisc")
routes$distbins <- as.numeric(cut2(routes$spDist, g=10))
library(Hmisc)#for binning distances
routes$distbins <- as.numeric(cut2(routes$spDist, g=10))
View(routes)
routes$distbinmeans <- tapply(routes$spDist, routes$distbins, mean)
rfhypo <- data.frame(c(1:10), c(1:10))
View(rfhypo)
distmean <- rep(0,10)
rfmean <- rep(0,10)
distmean <- rep(0,10)
rfmean <- rep(0,10)
rfhypo <- data.frame(distmean, rfmean)
View(rfhypo)
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
bins = 10
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
line(rfhypo, col="green")
lines(rfhypo, col="green")
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 20
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
routes$distbins
head(routes$distbins)
routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
hist(routes$rf, breaks=10)
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 30
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
bins = 20
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
routes$rf <- routes$spDist/routes$distance
#Or have the ratio mean "how much further route distance is than Euclidean/Great Circle
#routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
library(sp)
library(ggplot2)
library(Hmisc)#for binning distances
routes$rf <- routes$spDist/routes$distance
#Or have the ratio mean "how much further route distance is than Euclidean/Great Circle
#routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
routes$rf <- routes$distance/routes$spDist
hist(routes$rf, breaks=30)
bins = 10
#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.
#Use following to split into distance bins
#Then correlate average route factor per bin to average distance per bin
#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups
routes$distbins <- as.numeric(cut2(routes$spDist, g=bins))
distmean <- rep(0,bins)
rfmean <- rep(0,bins)
rfhypo <- data.frame(distmean, rfmean)
#Use these bins to get average distance...
rfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)
#... and average route factor
rfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)
plot(rfhypo)
lines(rfhypo, col="green")
plot(rfhypo)
lines(rfhypo, col="green", xlab="distance", ylab="mean route factor")
plot(rfhypo, xlab="distance", ylab="mean route factor")
lines(rfhypo, col="green")
myjekyllsite = c("http://danolner.github.io/")
KnitPost <- function(input, base.url = myjekyllsite) {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
install.packages("rmarkdown"")
install.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")

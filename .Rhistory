timeresultstext <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
#matrix API wants addresses separated by vertical bar
postcodeString <- paste(postcodes, collapse="|")
#set google distance matrix query
#See https://developers.google.com/maps/documentation/distancematrix/ for option info
qry <- paste("origins=", postcodeString,
"&destinations=", postcodeString ,
"&sensor=FALSE",
"&mode=walking",
#"&key=",
#apikey,
sep=""#no spaces
)
#Get the JSON
gimme <- GET(
testURL,
query = qry,
#If using in Leeds University, obv: comment this out if not, or if using Leeds Uni wifi
#Use this to see details of proxy connection: c(use_proxy("www-cache.leeds.ac.uk:3128", 8080), verbose())
c(use_proxy("www-cache.leeds.ac.uk:3128", 8080))
)
#http://blog.rstudio.org/2014/03/21/httr-0-3/
stop_for_status(gimme)
store <- content(gimme)
#Parse postcodes
#"results are returned in rows, each row containing one origin paired with each destination"
#So assume origins are columns, cycle through each row and get elements
for(origins in 1:length(postcodes)) {
for(dests in 1:length(postcodes)) {
distresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$value
timeresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$value
distresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$text
timeresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$text
}
}
#Add postcode labels
rownames(distresultstext) <- postcodes
colnames(distresultstext) <- postcodes
rownames(timeresultstext) <- postcodes
colnames(timeresultstext) <- postcodes
#get ride of odd diagonal. 1 minute to get to where I'm standing?
distresultstext[distresultstext == "1 m"] <- "0"
timeresultstext[timeresultstext == "1 min"] <- "0 min"
write.csv(distresultstext, file="distresults.csv")
write.csv(timeresultstext, file="timeresults.csv")
#Or use venue names, more logically!
rownames(distresultstext) <- venues
colnames(distresultstext) <- venues
rownames(timeresultstext) <- venues
colnames(timeresultstext) <- venues
write.csv(distresultstext, file="distresults_venues.csv")
write.csv(timeresultstext, file="timeresults_venues.csv")
store
apikey <- read.csv("apikey.csv")
apikey <- apikey[1,]
#Base URL, will knock query together below
testURL <- "https://maps.googleapis.com/maps/api/distancematrix/json"
#venuesNPostcodes <- read.csv("tramlineVenues_n_Postcodes.csv")
#postcodes <- venuesNPostcodes[,2]
postcodes <- c("s118sa","s71bx","ls84dr")
#no whitespace
postcodes <- gsub(" ", "", postcodes, fixed=TRUE)
venues <- venuesNPostcodes[,1]
#OD matrix
distresults <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
timeresults <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
distresultstext <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
timeresultstext <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
#matrix API wants addresses separated by vertical bar
postcodeString <- paste(postcodes, collapse="|")
#set google distance matrix query
#See https://developers.google.com/maps/documentation/distancematrix/ for option info
qry <- paste("origins=", postcodeString,
"&destinations=", postcodeString ,
"&sensor=FALSE",
"&mode=walking",
"&key=",
apikey,
sep=""#no spaces
)
#Get the JSON
gimme <- GET(
testURL,
query = qry,
#If using in Leeds University, obv: comment this out if not, or if using Leeds Uni wifi
#Use this to see details of proxy connection: c(use_proxy("www-cache.leeds.ac.uk:3128", 8080), verbose())
c(use_proxy("www-cache.leeds.ac.uk:3128", 8080))
)
#http://blog.rstudio.org/2014/03/21/httr-0-3/
stop_for_status(gimme)
store <- content(gimme)
#Parse postcodes
#"results are returned in rows, each row containing one origin paired with each destination"
#So assume origins are columns, cycle through each row and get elements
for(origins in 1:length(postcodes)) {
for(dests in 1:length(postcodes)) {
distresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$value
timeresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$value
distresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$text
timeresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$text
}
}
#Add postcode labels
rownames(distresultstext) <- postcodes
colnames(distresultstext) <- postcodes
rownames(timeresultstext) <- postcodes
colnames(timeresultstext) <- postcodes
#get ride of odd diagonal. 1 minute to get to where I'm standing?
distresultstext[distresultstext == "1 m"] <- "0"
timeresultstext[timeresultstext == "1 min"] <- "0 min"
write.csv(distresultstext, file="distresults.csv")
write.csv(timeresultstext, file="timeresults.csv")
#Or use venue names, more logically!
rownames(distresultstext) <- venues
colnames(distresultstext) <- venues
rownames(timeresultstext) <- venues
colnames(timeresultstext) <- venues
write.csv(distresultstext, file="distresults_venues.csv")
write.csv(timeresultstext, file="timeresults_venues.csv")
store
postcodes <- venuesNPostcodes[,2]
length(postcodes)
16^2
apikey <- read.csv("apikey.csv")
apikey <- apikey[1,]
#Base URL, will knock query together below
testURL <- "https://maps.googleapis.com/maps/api/distancematrix/json"
#venuesNPostcodes <- read.csv("tramlineVenues_n_Postcodes.csv")
postcodes <- venuesNPostcodes[,2]
#postcodes <- c("s118sa","s71bx","ls84dr")
#no whitespace
postcodes <- gsub(" ", "", postcodes, fixed=TRUE)
venues <- venuesNPostcodes[,1]
#OD matrix
distresults <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
timeresults <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
distresultstext <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
timeresultstext <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
#matrix API wants addresses separated by vertical bar
postcodeString <- paste(postcodes, collapse="|")
#set google distance matrix query
#See https://developers.google.com/maps/documentation/distancematrix/ for option info
qry <- paste("origins=", postcodeString,
"&destinations=", postcodeString ,
"&sensor=FALSE",
"&mode=walking",
"&key=",
apikey,
sep=""#no spaces
)
#Get the JSON
gimme <- GET(
testURL,
query = qry,
#If using in Leeds University, obv: comment this out if not, or if using Leeds Uni wifi
#Use this to see details of proxy connection: c(use_proxy("www-cache.leeds.ac.uk:3128", 8080), verbose())
c(use_proxy("www-cache.leeds.ac.uk:3128", 8080))
)
#http://blog.rstudio.org/2014/03/21/httr-0-3/
stop_for_status(gimme)
store <- content(gimme)
#Parse postcodes
#"results are returned in rows, each row containing one origin paired with each destination"
#So assume origins are columns, cycle through each row and get elements
for(origins in 1:length(postcodes)) {
for(dests in 1:length(postcodes)) {
distresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$value
timeresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$value
distresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$text
timeresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$text
}
}
#Add postcode labels
rownames(distresultstext) <- postcodes
colnames(distresultstext) <- postcodes
rownames(timeresultstext) <- postcodes
colnames(timeresultstext) <- postcodes
#get ride of odd diagonal. 1 minute to get to where I'm standing?
distresultstext[distresultstext == "1 m"] <- "0"
timeresultstext[timeresultstext == "1 min"] <- "0 min"
write.csv(distresultstext, file="distresults.csv")
write.csv(timeresultstext, file="timeresults.csv")
#Or use venue names, more logically!
rownames(distresultstext) <- venues
colnames(distresultstext) <- venues
rownames(timeresultstext) <- venues
colnames(timeresultstext) <- venues
write.csv(distresultstext, file="distresults_venues.csv")
write.csv(timeresultstext, file="timeresults_venues.csv")
store
venuesNPostcodes <- read.csv("tramlineVenues_n_Postcodes.csv")
postcodes <- venuesNPostcodes[,2]
#try ten
postcodes <- postcodes[1:10,]
postcodes <- postcodes[1:10]
postcodes
postcodes <- gsub(" ", "", postcodes, fixed=TRUE)
venues <- venuesNPostcodes[,1]
#OD matrix
distresults <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
timeresults <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
distresultstext <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
timeresultstext <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
#matrix API wants addresses separated by vertical bar
postcodeString <- paste(postcodes, collapse="|")
#set google distance matrix query
#See https://developers.google.com/maps/documentation/distancematrix/ for option info
qry <- paste("origins=", postcodeString,
"&destinations=", postcodeString ,
"&sensor=FALSE",
"&mode=walking",
#"&key=",
#apikey,
sep=""#no spaces
)
#Get the JSON
gimme <- GET(
testURL,
query = qry,
#If using in Leeds University, obv: comment this out if not, or if using Leeds Uni wifi
#Use this to see details of proxy connection: c(use_proxy("www-cache.leeds.ac.uk:3128", 8080), verbose())
c(use_proxy("www-cache.leeds.ac.uk:3128", 8080))
)
#http://blog.rstudio.org/2014/03/21/httr-0-3/
stop_for_status(gimme)
store <- content(gimme)
#Parse postcodes
#"results are returned in rows, each row containing one origin paired with each destination"
#So assume origins are columns, cycle through each row and get elements
for(origins in 1:length(postcodes)) {
for(dests in 1:length(postcodes)) {
distresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$value
timeresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$value
distresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$text
timeresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$text
}
}
#Add postcode labels
rownames(distresultstext) <- postcodes
colnames(distresultstext) <- postcodes
rownames(timeresultstext) <- postcodes
colnames(timeresultstext) <- postcodes
#get ride of odd diagonal. 1 minute to get to where I'm standing?
distresultstext[distresultstext == "1 m"] <- "0"
timeresultstext[timeresultstext == "1 min"] <- "0 min"
write.csv(distresultstext, file="distresults.csv")
write.csv(timeresultstext, file="timeresults.csv")
#Or use venue names, more logically!
rownames(distresultstext) <- venues
colnames(distresultstext) <- venues
rownames(timeresultstext) <- venues
colnames(timeresultstext) <- venues
write.csv(distresultstext, file="distresults_venues.csv")
write.csv(timeresultstext, file="timeresults_venues.csv")
store
postcodematrix <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
rownames(postcodematrix) <- postcodes
colnames(postcodematrix) <- postcodes
postcodematrix
library(reshape2)
postcodepairs <- melt(postcodematrix)
postcodepairs
venuesNPostcodes <- read.csv("tramlineVenues_n_Postcodes.csv")
postcodes <- venuesNPostcodes[,2]
postcodematrix <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
rownames(postcodematrix) <- postcodes
colnames(postcodematrix) <- postcodes
postcodepairs <- melt(postcodematrix)
postcodepairs
16*16
postcodes <- gsub(" ", "", postcodes, fixed=TRUE)
venues <- venuesNPostcodes[,1]
#turn postcodes into a melted list of pairs
#(This is one way of avoiding the matrix API limits)
postcodematrix <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
rownames(postcodematrix) <- postcodes
colnames(postcodematrix) <- postcodes
postcodepairs <- melt(postcodematrix)
postcodepairs
nrow(postcodepairs)
venuesNPostcodes <- read.csv("tramlineVenues_n_Postcodes.csv")
postcodes <- venuesNPostcodes[,2]
postcodes <- gsub(" ", "", postcodes, fixed=TRUE)
venues <- venuesNPostcodes[,1]
#turn postcodes into a melted list of pairs
#(This is one way of avoiding the matrix API limits)
postcodematrix <- matrix(nrow=length(postcodes) , ncol=length(postcodes))
rownames(postcodematrix) <- postcodes
colnames(postcodematrix) <- postcodes
postcodepairs <- melt(postcodematrix)
results <- matrix(nrow=nrow(postcodepairs) , ncol=4)
for(i in 1:nrow(postcodepairs)) {
#set google distance matrix query
#See https://developers.google.com/maps/documentation/distancematrix/ for option info
qry <- paste("origins=", postcodepairs$Var1[i],
"&destinations=", postcodepairs$Var2[i] ,
"&sensor=FALSE",
"&mode=walking",
#"&key=",
#apikey,
sep=""#no spaces
)
#Get the JSON
gimme <- GET(
testURL,
query = qry,
#If using in Leeds University, obv: comment this out if not, or if using Leeds Uni wifi
#Use this to see details of proxy connection: c(use_proxy("www-cache.leeds.ac.uk:3128", 8080), verbose())
c(use_proxy("www-cache.leeds.ac.uk:3128", 8080))
)
#http://blog.rstudio.org/2014/03/21/httr-0-3/
stop_for_status(gimme)
store <- content(gimme)
#Being conservative: 0.3 seconds should hit ~66 elements per 10 seconds
Sys.sleep(0.3)
if(store$rows[[1]]$elements[[1]]$status=="OK") {
results[i,1] <- store$rows[[1]]$elements[[1]]$distance$value
results[i,2] <- store$rows[[1]]$elements[[1]]$duration$value
results[i,3] <- store$rows[[1]]$elements[[1]]$distance$text
results[i,4] <- store$rows[[1]]$elements[[1]]$duration$text
} else {
results[i,1] <- "xxx"
results[i,2] <- "xxx"
results[i,3] <- "xxx"
results[i42] <- "xxx"
}
}#end for
results
results[results == "1 m"] <- "0"
results[results == "1 min"] <- "0 min"
results
resultsBackup <- results
resultsBackup <- results
textresults <- results[,3:4]
textresults
cbind(postcodepairs, textresults)
textresults <- cbind(postcodepairs, textresults)
head(textresults)
textresults
distance <- cbind(postcodepairs, textresults)
distance
textresults <- results[,3:4]
#join up postcodes. One matrix for distance, one for time
distance <- cbind(postcodepairs, textresults)
distance
distance <- distance[,c(1,2,4)]
distance
distancematrix <- dcast(distance, Var1 ~ var2)
distancematrix <- dcast(distance, Var1 ~ Var2)
distancematrix
distancematrix <- dcast(distance, Var1 ~ Var2, value.var = 1)
distancematrix <- dcast(distance, Var1 ~ Var2, value.var = "1")
distance
head(distance)
colnames(distance)
distancematrix <- dcast(distance, Var1 ~ Var2, value.var = "1")
textresults$duptest <- paste(textresults[,1],textresults[,2],sep="")
textresults
head(textresults)
textresults <- results[,3:4]
textresults$duptest <- paste(textresults, textresults[,1],textresults[,2],sep="")
textresults <- results[,3:4]
textresults <- results[,3:4]
textresults <- textresults[!duplicated(textresults[,1:2]),]
textresults
nrow(textresults)
16*16
textresults <- results[,3:4]
#join up postcodes. One matrix for distance, one for time
distance <- cbind(postcodepairs, textresults)
distance <- distance[,c(1,2,4)]
head(distance)
distance <- distance[!duplicated(distance[,1:2]),]
nrow(distance)
distance
distancematrix <- dcast(distance, Var1 ~ Var2, value.var = "1")
head(distancematrix)
postcodes
postcodepairs
nrow(postcodepairs)
16*16
results <- matrix(nrow=nrow(postcodepairs) , ncol=4)
for(i in 1:nrow(postcodepairs)) {
#set google distance matrix query
#See https://developers.google.com/maps/documentation/distancematrix/ for option info
qry <- paste("origins=", postcodepairs$Var1[i],
"&destinations=", postcodepairs$Var2[i] ,
"&sensor=FALSE",
"&mode=walking",
#"&key=",
#apikey,
sep=""#no spaces
)
#Get the JSON
gimme <- GET(
testURL,
query = qry,
#If using in Leeds University, obv: comment this out if not, or if using Leeds Uni wifi
#Use this to see details of proxy connection: c(use_proxy("www-cache.leeds.ac.uk:3128", 8080), verbose())
c(use_proxy("www-cache.leeds.ac.uk:3128", 8080))
)
#http://blog.rstudio.org/2014/03/21/httr-0-3/
stop_for_status(gimme)
store <- content(gimme)
#Being conservative: 0.3 seconds should hit ~66 elements per 10 seconds
Sys.sleep(0.3)
if(store$rows[[1]]$elements[[1]]$status=="OK") {
results[i,1] <- store$rows[[1]]$elements[[1]]$distance$value
results[i,2] <- store$rows[[1]]$elements[[1]]$duration$value
results[i,3] <- store$rows[[1]]$elements[[1]]$distance$text
results[i,4] <- store$rows[[1]]$elements[[1]]$duration$text
} else {
results[i,1] <- "xxx"
results[i,2] <- "xxx"
results[i,3] <- "xxx"
results[i42] <- "xxx"
}
}#end for
resultsBackup <- results
head(results)
nrow(results)
textresults <- results[,3:4]
textresults
head(textresults)
distance <- cbind(postcodepairs, textresults)
head(distance)
distance <- distance[,c(1,2,4)]
distancematrix <- dcast(distance, Var1 ~ Var2, value.var = "1")
head(distance)
View(distance)
length(unique(distance$Var1))
length(results)
length(postcodepairs)
nrow(results)
nrow(postcodepairs)
head(results)
length(unique(postcodepairs))
length(unique(postcodepairs$Var1))
length(unique(postcodes))
head(distance)
textresults <- results[,3:4]
textresults$id <- seq(1:nrow(textresults))
textresultes
textresults
class(textresults)
textresults <- results[,3:4]
textresults <- results[,3:4]
class(textresults)
textresults <- data.frame(textresults)
textresults$id <- seq(1:nrow(textresults))
head(textresults)
distance <- cbind(postcodepairs, textresults)
head(distance)
distance <- distance[,c(1,2,4,5)]
head(distance)
distance <- cbind(postcodepairs, textresults)
distance <- distance[,c(1,2,5,6)]
head(distance)
distancematrix <- dcast(distance, id + Var1 ~ Var2, value.var = "1")
distancematrix <- dcast(distance, id + Var1 ~ Var2, value.var = "X2")
distancematrix
textresults <- results[,3:4]
textresults <- data.frame(textresults)
textresults$id <- seq(1:16, times = 16)
textresults <- results[,3:4]
textresults <- data.frame(textresults)
textresults$id <- rep(1:16, times = 16)
distance <- cbind(postcodepairs, textresults)
distance <- distance[,c(1,2,5,6)]
distancematrix <- dcast(distance, id + Var1 ~ Var2, value.var = "X2")
textresults$id
head(distance)
distancematrix
View(distance)
distancematrix <- dcast(distance, id ~ Var2, value.var = "X2")
distancematrix <- dcast(distance, Var1 + id ~ Var2, value.var = "X2")
distancematrix <- dcast(distance, Var1 ~ Var2 + id, value.var = "X2")
distancematrix <- dcast(distance, id ~ Var2, value.var = "X2")
distancematrix
venuematrix <- matrix(nrow=length(venues) , ncol=length(venues))
rownames(venuematrix) <- venues
colnames(venuematrix) <- venues
venuepairs <- melt(venuematrix)
venuepairs
textresults <- results[,3:4]
distance <- cbind(venuepairs, textresults)
distance <- distance[,c(1,2,5,6)]
distancematrix <- dcast(distance, Var1 ~ Var2, value.var = "X2")
distancematrix <- dcast(distance, Var1 ~ Var2, value.var = "1")
distancematrix
View(distancematrix)
time <- cbind(venuepairs, textresults)
head(time)
distance <- cbind(venuepairs, textresults)
head(distance)
distance <- cbind(venuepairs, textresults)
distance <- distance[,c(1,2,4)]
distancematrix <- dcast(distance, Var1 ~ Var2, value.var = "1")
View(distancematrix)
time <- cbind(venuepairs, textresults)
time <- time[,c(1,2,5)]
timematrix <- dcast(time, Var1 ~ Var2, value.var = "1")
head(timematrix)
head(time)
timematrix <- dcast(time, Var1 ~ Var2, value.var = "2")
View(timematrix)
distancematrix[distancematrix == "1 m"] <- "xx"
timematrix[timematrix == "1 min"] <- "xx"
write.csv(distresultstext, file="distresults.csv")
write.csv(timeresultstext, file="timeresults.csv")
write.csv(distancematrix, file="distresults.csv")
write.csv(timematrix, file="timeresults.csv")

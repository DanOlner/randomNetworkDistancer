{
    "contents" : "library(rgdal)\nlibrary(rgeos)\nlibrary(httr)\nlibrary(jsonlite)\n\n#Base URL, will knock query together below\ntestURL <- \"http://maps.googleapis.com/maps/api/distancematrix/json\"\n\npostcodes <- c(\"s118sa\",\"s71bx\",\"ls84dr\")\n\n#OD matrix\ndistresults <- matrix(nrow=length(postcodes) , ncol=length(postcodes))\ntimeresults <- matrix(nrow=length(postcodes) , ncol=length(postcodes))\n\ndistresultstext <- matrix(nrow=length(postcodes) , ncol=length(postcodes))\ntimeresultstext <- matrix(nrow=length(postcodes) , ncol=length(postcodes))\n\n#matrix API wants addresses separated by vertical bar\npostcodeString <- paste(postcodes, collapse=\"|\")\n\n#set google distance matrix query\n#See https://developers.google.com/maps/documentation/distancematrix/ for option info\nqry <- paste(\"origins=\", postcodeString,\n             \"&destinations=\", postcodeString ,\n             \"&sensor=FALSE\",\n              \"&mode=bicycling\",\n             sep=\"\"#no spaces\n)\n\n#Get the JSON\ngimme <- GET(\n  testURL,  \n  query = qry,\n  #If using in Leeds University, obv: comment this out if not, or if using Leeds Uni wifi\n  #Use this to see details of proxy connection: c(use_proxy(\"www-cache.leeds.ac.uk:3128\", 8080), verbose())\n  c(use_proxy(\"www-cache.leeds.ac.uk:3128\", 8080))\n)\n\n#http://blog.rstudio.org/2014/03/21/httr-0-3/\nstop_for_status(gimme)\n\n#Parse postcodes\n#\"results are returned in rows, each row containing one origin paired with each destination\"\n#So assume origins are columns, cycle through each row and get elements\nfor(origins in 1:length(postcodes)) {\n  \n  for(dests in 1:length(postcodes)) {\n    \n    distresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$value\n    timeresults[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$value\n    \n    distresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$distance$text\n    timeresultstext[dests,origins] <- store$rows[[origins]]$elements[[dests]]$duration$text\n    \n    \n  }\n  \n}\n\n#Add postcode labels\nrownames(distresultstext) <- postcodes\ncolnames(distresultstext) <- postcodes\n\nrownames(timeresultstext) <- postcodes\ncolnames(timeresultstext) <- postcodes\n\n#get ride of odd diagonal. 1 minute to get to where I'm standing?\ndistresultstext[distresultstext == \"1 m\"] <- \"0\"\ntimeresultstext[timeresultstext == \"1 min\"] <- \"0 min\"\n\nwrite.csv(distresultstext, file=\"distresults.csv\")\nwrite.csv(timeresultstext, file=\"timeresults.csv\")\n",
    "created" : 1434555129759.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2682410977",
    "id" : "10C6C49B",
    "lastKnownWriteTime" : 1436124039,
    "path" : "C:/Users/geodo/Dropbox/R/Workspace/randomNetworkDistancer/postCodeMatrix.R",
    "project_path" : "postCodeMatrix.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}
{
    "contents" : "#compare straight-line (or Great Circle) distance to route distance\nlibrary(sp)\nlibrary(ggplot2)\nlibrary(Hmisc)#for binning distances\n\nroutes <- read.csv(\"latestrbindOfMatrixOutputs.csv\")\n\n#convert distance to kms\nroutes$distance <- routes$distance / 1000\n\n#For ease of reading, let's subset to get the values we want\n# origins <- subset(routes, select = c(origin_x, origin_y))\n# dests <- subset(routes, select = c(dest_x, dest_y))\n# justcoords <- subset(routes, select = c(origin_x, origin_y, dest_x, dest_y))\n# justcoords <- data.matrix(justcoords)\n\norigins <- data.matrix(subset(routes, select = c(origin_x, origin_y)))\ndests <- data.matrix(subset(routes, select = c(dest_x, dest_y)))\n\nroutes$spDist <- 0\n\nfor (i in 1:nrow(origins)) {\n  \n  #get a single pair, turn into matrix for spDistN1\n  #needs transposing. Not sure why it doesn't keep the original orientation\n  orig <- t(data.matrix(origins[i,]))\n  #spDistN1: first arg needs to be a matrix of points. Supplying it with a single-row matrix\n  #Second argument has to be a single point.\n  #If the first arg had more values it would find all dists between each of those and the single point\n  #But we only want each origin-destination pair distance\n  #http://rpackages.ianhowson.com/rforge/sp/man/spDistsN1.html\n  routes$spDist[i] <- spDistsN1(orig,dests[i,], longlat=TRUE)\n  \n}\n\nplot(routes$distance, routes$spDist)\n\n#ROUTE FACTOR\n#I think I might reverse the ratio from the one I say in the PhD.\n#Euclidean over route will be < 1, with it going towards asymptotic (lim -> 1) as routes become perfect.\n\n#routes$rf <- routes$spDist/routes$distance\n#Or have the ratio mean \"how much further route distance is than Euclidean/Great Circle\nroutes$rf <- routes$distance/routes$spDist\n\nhist(routes$rf, breaks=30)\n\nbins = 10\n\n#Hypothesis: route factor varies depending on distance. Lower distances have lower route factors.\n#Use following to split into distance bins\n#Then correlate average route factor per bin to average distance per bin\n#http://stackoverflow.com/questions/6104836/splitting-a-continuous-variable-into-equal-sized-groups\nroutes$distbins <- as.numeric(cut2(routes$spDist, g=bins))\n\ndistmean <- rep(0,bins)\nrfmean <- rep(0,bins)\n\nrfhypo <- data.frame(distmean, rfmean)\n\n#Use these bins to get average distance...\nrfhypo$distmean <- tapply(routes$spDist, routes$distbins, mean)\n#... and average route factor\nrfhypo$rfmean <- tapply(routes$rf, routes$distbins, mean)\n\nplot(rfhypo, xlab=\"distance\", ylab=\"mean route factor\")\nlines(rfhypo, col=\"green\")\n",
    "created" : 1434555874384.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2710694587",
    "id" : "E6F660CA",
    "lastKnownWriteTime" : 1435937343,
    "path" : "C:/Users/geodo/Dropbox/R/Workspace/randomNetworkDistancer/routeFactor.R",
    "project_path" : "routeFactor.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}